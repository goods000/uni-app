<<<<<<< .mine
 <template>
	<view class="page">
	<view>
		<text style="color: #fff">多人会议 {{time}}</text>
	</view>
	<view>
		<text style="color: #fff; font-size: 16rpx;">会议id {{confrId}}</text>
	</view>
	<view class="videoBox">
		<view>
		<emlive-pusher 
			class="live-pusher" 
			objectFit="fill"
			:videoWidth="640"
			:videoHeight="480"
			:muted="muted" 
			:enableCamera="enableCamera" 
			:devicePosition="devicePosition"
			:rtcLogToConsole="true"
			id="livePusher"
			ref="livePusher" 
			@bindnetstatus="netstatus" 
			@bindstatechange="statechange" 
			@callbackData="onData"
			:style="{width:170+'px',height:170+'px',margin: 5+'px', 'background-color': bkColor}"
			>
		</emlive-pusher>
		<text style="color:#fff; font-size: 20rpx;text-align: center;">我</text>
		</view>
		<view v-for="(item, index) in livePlayes"
			:key="item.id"
		>
			<emlive-player
				id="livePlayer" 
				ref="livePlayer" 
				objectFit="fit" 
				@bindstatechange="playerStateChange"
				@bindnetstatus="playerNetChange"
				:data-streamId="item.id"
				:muted="false"
				:enableCamera="true" 
				:openSpeaker="openSpeaker"
				@callbackData="onPlayerData"
				style="width:170px;height:170px; margin: 5px"
				>
			</emlive-player>
			<text style="color: #fff"> {{ item.imName }} </text>
		</view>
	</view>
	
	<view class="controlContent">
		<view class="emediaContrContent">
			<view class="controlItem" @tap="switchCamera">
				<image
					class="icon-record"
					:src="getImgUrl(devicePositionIcon)"/>
				<text :style="{color: devicePositionColor}">摄像头</text>
			</view>
			<view class="controlItem" @tap="switchMicphone">
				<image
					class="icon-record"
					:src="getImgUrl(micphoneIcon)"/>
				<text :style="{color: micphoneColor}">麦克风</text>
			</view>
			<view class="controlItem" @tap="togglePlay">
				<image
					class="icon-record"
					:src="getImgUrl(videoIcon)"/>
				<text :style="{color: videoColor}">视频</text>
			</view>
			<view class="controlItem" @tap="inviteMember">
				<image
					class="icon-record"
					:src="getImgUrl('invite_white')"/>
				<text class="inviteText">邀请</text>
			</view>
		</view>
		<view class="hangup" @tap="hangup">
			<text style="color: #fff">挂断</text>
		</view>
	</view>
	
	<chatEmediaInvite :groupId="groupId" @onInvite="onInvite" @goBack="goBack" v-if="showInvite"/>
	</view>
	
 </template>
 
<script>
import chatEmediaInvite from "../../components/invite/index.nvue"
	export default {
		data() {
			return {
				livePlayes: [],
				devicePosition: "front",
				muted: false,
				devicePositionIcon: 'switchCamera_white',
				devicePositionColor: '#fff',
				micphoneIcon: 'micphone_white',
				micphoneColor: '#fff',
				videoIcon: 'video_white',
				videoColor: '#fff',
				confrId: '',
				enableCamera: true,
				time: '00:00:00',
				context: {},
				members: [],
				groupId: '',
				bkColor: "rgba(0,0,0,0)",
				showInvite: false,
				openSpeaker: true
			}
		},
		components: {
			chatEmediaInvite,
		},
		props: {
		  username: {
		    type: Object,
		    default: () => ({}),
		  },
		  action: {
		    type: Object,
		    default: ()=>({}),
		  }
		},
		methods: {
			joinRoom(data){
				console.log(new Date().toLocaleString()+' joinRoom',data)
				let me = this;
				let rec = wx.getStorageSync("rec") || true;
				let recMerge = wx.getStorageSync("recMerge") || true;
				// 加入已有会议
				if(data && data.conferenceId){
					uni.emedia.mgr.joinConference(data.conferenceId, data.password).then( (res) => {
						console.log('我已经加入会议了', res)
					}).catch((e)=>{
						console.log('加入会议失败', e)
					})
					return 
				}
				// 创建会议并加入
				uni.emedia.mgr.createConference(10, '123456', rec, recMerge).then( (data) => {
					console.log(new Date().toLocaleString()+' 创建会议成功', data)
					let ticket = data.data.ticket
					let ticketJosn = JSON.parse(ticket)
					let confrId = me.confrId = ticketJosn.confrId

					uni.emedia.mgr.joinConference(confrId, '123456').then( (res) => {
						console.log('我已经加入会议了', res)
						me.sendInviteMsg(me.members, confrId, '123456') // 发送邀请消息
					})
				})
			},
			
			addEmediaListen(){
				let me = this;

				uni.emedia.mgr.onMemberExited = function(reason) {
					console.log(new Date().toLocaleString()+' **** onMemberExited: ---', reason)
				};
				uni.emedia.mgr.onStreamRemoved = function(stream){
					console.log(new Date().toLocaleString()+' ***** onStreamRemoved -----', stream)
					me.livePlayes.forEach((item, index) => {
						if(item.id === stream.id){
							me.livePlayes.splice(index, 1)
						}
					})
				};
				
				uni.emedia.mgr.onMemberJoined = function(mem, steam) {
					console.log(new Date().toLocaleString()+"onMemberJoined :", mem, steam)

					var jid = uni.WebIM.conn.context.jid
					var identityName = jid.appKey + '_' + jid.name+ '@' + jid.domain
					
					if(mem.name === identityName){ // 自己加入会议了
						console.log(' --- 发布流 publish---', me.$refs.livePusher)
						uni.emedia.mgr.publish(me.confrId, me.$refs.livePusher)
					}
				};
				
				uni.emedia.mgr.onStreamAdded = function(stream) {
					console.log(new Date().toLocaleString()+'****** onAddStream ***', stream)
					let streamId = stream.id
					let dataStream = stream;
					if(me.livePlayes.length > 5) return; // 最多支持9个
					stream.imName = me.getName(stream.memName)
					me.livePlayes.push(stream)
					
					setTimeout(()=>{ // 等dom创建好之后再订阅流，防止拿不到 me.$refs.livePlayer
						console.log(new Date().toLocaleString()+ '****** subscribe2 ***', me.$refs.livePlayer[0])
						me.$refs.livePlayer.forEach((item) => {
							if(item.attr.dataStreamId === streamId){
								uni.emedia.mgr.subscribe(me.confrId, dataStream, item)
							}
						})
					}, 1000)
				};
			},
			
			// live-pusher 组件回调数据
			onData(data){
				uni.emedia.mgr.postMessage(this.confrId, data, this.$refs.livePusher)
			},
			// livePlayer 组件回调数据
			onPlayerData(data){
				let me = this;
				if(data.detail.type === 'feature'){
					console.log(new Date().toLocaleString()+' *** 拉流 *** 插件返回数据', data)
					let rtcId = data.detail.data.subSId
					let index;
					console.log('rtccID -----', rtcId)

					me.livePlayes.forEach((item, key) => {
						if(item.id == rtcId){
							index = key
						}
					})
					uni.emedia.mgr.postMessage(me.confrId, data, me.$refs.livePlayer[index])
				}
			},
			
			inviteMember(){
				this.showInvite = true;
			},
			goBack(){
				this.showInvite = false;
			},
			onInvite(member){ //收到邀请
				this.showInvite = false;
				if(member.length){
					this.sendInviteMsg(member, this.confrId, this.password || '123456')
				}
			},
			sendInviteMsg(members, confrId, password){
				let me = this;
				console.log('进入发邀请的函数', members)
				console.log('this.username.groupId----', this.groupId)
				console.log('confrId', confrId)
				
				members&&members.forEach((value) => {
					let id = uni.WebIM.conn.getUniqueId();
					let msg = new uni.WebIM.message('txt', id);
			
					msg.set({
						// msg: wx.WebIM.conn.context.userId + ' invite you to video call',
						msg: wx.WebIM.conn.context.userId + ' 邀请你通话',
						from: wx.WebIM.conn.context.userId,
						to: value,
						roomType: false,
						chatType: 'singleChat',
						ext: {
							msg_extension: JSON.stringify({
								inviter: wx.WebIM.conn.context.userId,
								group_id: me.groupId
							}),
							password: password,
							conferenceId: confrId
						},
						success(id, serverMsgId){
							console.log('发送邀请消息成功 to: '+value)
						},
						fail(id, serverMsgId){
							console.log('发送邀请消息失败了')
						}
					});
					
					uni.WebIM.conn.send(msg.body);
				})
			},
			statechange(e) {
				console.log(new Date().toLocaleString()+" statechange:" + JSON.stringify(e));
				// 没有权限请允许权限，再重新进入会议，或者提前打开app 麦克风 摄像头权限
				// 安卓授权慢的话会出现没有画面声音
				switch(e.detail.code){
					case 3001:
						uni.showToast({
							title: '无麦克风权限',
							duration: 2000
						})
						break;
						
					case 3000: 
						uni.showToast({
							title: '无摄像头权限',
							duration: 2000
						})
						break;
					case 2105:
						uni.showToast({
							title: '视频无数据',
							duration: 1000
						})
						break;
					case 2000:
						uni.showToast({
							title: '2000 RTCIceConnectionStateNew',
							duration: 1000
						})
						break;
					case 2004:
						uni.showToast({
							title: '2004 RTCIceConnectionStateFailed',
							duration: 1000
						})
						
						break;
					case 2005:
						uni.showToast({
							title: '2005 RTCIceConnectionStateDisconnected',
							duration: 1000
						})
						break;
					case 2002:
						uni.showToast({
							title: '2002 RTCIceConnectionStateConnected',
							duration: 1000
						})
						break;
					case 2006:
						uni.showToast({
							title: '2006 RTCIceConnectionStateClosed',
							duration: 1000
						})
						break;
					case 2107:
						uni.showToast({
							title: '2107 pub流失败',
							duration: 1000
						})
						break;
					case 2111: 
						uni.showToast({
							title: '2111 sub流失败',
							duration: 1000
						})
						break;
					case 2110:
						uni.showToast({
							title: '2110 sub流成功',
							duration: 1000
						})
						break;
					case 2106:
						uni.showToast({
							title: '2106 pub流成功',
							duration: 1000
						})
						break;
					default:
						break;
				}
			},
			
			playerStateChange(e){
				console.log('player state change:', e)
				uni.emedia.mgr.onStateChange(e)
				switch(e.detail.code){
					case 2105:
						uni.showToast({
							title: '视频无数据',
							duration: 1000
						})
						break;
					case 2000:
						uni.showToast({
							title: '2000 RTCIceConnectionStateNew',
							duration: 1000
						})
						break;
					case 2004:
						uni.showToast({
							title: '2004 RTCIceConnectionStateFailed',
							duration: 1000
						})
						break;
					case 2005:
						uni.showToast({
							title: '2005 RTCIceConnectionStateDisconnected',
							duration: 1000
						})
						break;
					case 2002:
						uni.showToast({
							title: '2002 RTCIceConnectionStateConnected',
							duration: 1000
						})
						break;
					case 2006:
						uni.showToast({
							title: '2006 RTCIceConnectionStateClosed',
							duration: 1000
						})
						break;
					case 2107:
						uni.showToast({
							title: '2107 pub流失败',
							duration: 1000
						})
						break;
					case 2111: 
						uni.showToast({
							title: '2111 sub流失败',
							duration: 1000
						})
						break;
					case 2110:
						uni.showToast({
							title: '2110 sub流成功',
							duration: 1000
						})
						break;
					case 2106:
						uni.showToast({
							title: '2106 pub流成功',
							duration: 1000
						})
						break;
					default:
						break;
				}
			},
			netstatus(e) {
				// console.log("插件返回netstatus", e)
				console.log("netstatus:" + JSON.stringify(e));
				if(e.detail.code == 4001){
					uni.showToast({
						title: '网络质量差',
						duration: 2000
					})
				}else if(e.detail.code == 4002){
					uni.showToast({
						title: '网络已断开',
						duration: 2000
					})
				}else if(e.detail.code == 4000){
					uni.showToast({
						title: '网络已连接',
						duration: 2000
					})
				}
				
			},
			
			playerNetChange(e){
				console.log(new Date().toLocaleString()+" player netstatus:" + JSON.stringify(e));
				if(e.detail.code == 4001){
					uni.showToast({
						title: '网络质量差',
						duration: 2000
					})
				}else if(e.detail.code == 4002){
					uni.showToast({
						title: '网络已断开',
						duration: 2000
					})
				}else if(e.detail.code == 4000){
					uni.showToast({
						title: '网络已连接',
						duration: 2000
					})
				}
			},
			error(e) {
				console.log("error:" + JSON.stringify(e));
			},

			stop: function() {
				this.$refs.LlivePusher.stop()
			},
			switchCamera: function() {
				this.devicePosition = this.devicePosition == 'front' ? 'back' : 'front'
				this.devicePositionIcon = this.devicePositionIcon =='switchCamera_white'?'switchCamera_gray': 'switchCamera_white';
				this.devicePositionColor = this.devicePositionColor == '#fff'? '#aaa':'#fff';
			},
			switchMicphone: function(){
				this.muted = !this.muted;
				this.micphoneIcon = this.micphoneIcon == 'micphone_white'? 'micphone_gray': 'micphone_white';
				this.micphoneColor = this.micphoneColor == '#fff'? '#aaa': '#fff'
			},
			
			togglePlay: function(){
				this.enableCamera = this.videoColor == '#fff'? false:true
				this.videoIcon = this.videoIcon == 'video_white'?'video_gray': 'video_white';
				this.videoColor = this.videoColor == '#fff'? '#aaa': '#fff'
				this.bkColor = this.videoColor == '#fff'? 'rgba(0,0,0,0)': 'rgba(0,0,0,1)';
			},
			hangup: function(){
				uni.emedia.mgr.exitConference(this.confrId)
				this.stopTimer()
				this.$refs.livePusher.stop();
				uni.navigateBack({
					 url: "../groupChatRoom/groupChatRoom"
				});
			},
			getImgUrl: function(name){
				return `../../static/images/${name}2x.png`
			},
			
			getTimer(){
				let count = 0;
				let time = '00:00:00'
				let me = this;
				this.timer = setInterval(() => {
					count++;
					let s = showNum(count % 60);
					let m = showNum(parseInt((count / 60)) % 60)
					let h = showNum(parseInt(count / 60 / 60))
					time = `${h}:${m}:${s}`
					me.time = time
				}, 1000)
	
				function showNum(num) {
					if (num < 10) {
						return '0' + num
					}
					return num
				}
			},
			stopTimer(){
				clearInterval(this.timer)
			},
			
			// 截取出im的userId 
			getName(str){
				console.log('name', str)
				if(typeof str !== 'string') return '';
				return (str.match(/chatdemoui_(\S*)@|chatdemoui_(\S*)/)[1] || str.match(/chatdemoui_(\S*)@|chatdemoui_(\S*)/)[2])
			}
		
		},
		
		onReady() {
			uni.setKeepScreenOn({keepScreenOn: true})
		},
		onLoad(options){
			this.addEmediaListen()
			let data = JSON.parse(options.srcData)
			this.getTimer()
			setTimeout(() => {
				if(data.action == 'join'){
					// 受邀请加入会议
					let {conferenceId, password, msg_extension} = data
					this.confrId = conferenceId;
					let msgExt = JSON.parse(msg_extension)
					this.groupId = msgExt.group_id
					this.joinRoom({conferenceId, password})
					return
				}
				let members = data.confrMember
				let groupId = data.groupId
				this.members = members;
				this.groupId = groupId;
				this.joinRoom()
			})
			
			uni.onNetworkStatusChange(function (res) {
			    console.log(new Date().toLocaleString()+' 网络是否连接', res.isConnected);
				if(!res.isConnected){
					uni.showToast({
						title: '网络断开连接',
						duration: 2000
					});
				}
			});
		},
		onUnload(){
			console.log(new Date().toLocaleString()+' 退出')
			uni.emedia.mgr.exitConference(this.confrId)
			this.stopTimer()
		}
	}
</script>

<style scoped>
/* @import url("./index.css"); */
.page{
	background-color: #333333;
	/* width: 750rpx;;
	height: 1464rpx; */
	width: 100%;
	height: 100vh;
	position: absolute;
}

.videoBox{
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	/* background-color: #008000; */
	overflow: hidden;
}
.remote-video{
	width: 371rpx;
	height: 371rpx;
	background-color: pink;
	margin: 2rpx;
}
.controlContent{
	display: flex;
	flex-direction: column;
	align-items: center;
	position: fixed;
	bottom: 0;
	width: 750rpx;
	/* background-color: #09BB07; */
}
.emediaContrContent{
	display: flex;
	/* flex: 1; */
	/* width: 750rpx; */
	flex-direction: row;
	justify-content: space-between;
	padding: 0;
	/* width: 100%; */
	/* background-color: #0000FF; */
}
.controlItem{
	margin: 30rpx;
	text-align: center;
	flex: 1;
	height: 100rpx;
	display: flex;
	justify-content: center;
	align-items: center;
	color: #FFFFFF;
	font-size: 12px;
	font-weight: bold;
}
.controlItem text{
	font-size: 10px;
	font-weight: bold;
}
.inviteText{
	color: #fff;
}
.hangup{
	width: 100rpx;
	height: 100rpx;
	border-radius: 50rpx;
	background-color: #CE3918;
	margin-top: 35rpx;
	margin-bottom: 30rpx;
	display: flex;
	align-items: center;
	justify-content: center;
	color: #FFFFFF;

}
.icon-record{
	width: 44rpx;
	height: 48rpx;
	margin: 5px;
}
</style>||||||| .r0
=======
 <template>
	<view class="page">
	<view>
		<text style="color: #fff">多人会议 {{time}}</text>
	</view>
	<view>
		<text style="color: #fff; font-size: 16rpx;">会议id {{confrId}}</text>
	</view>
	<view class="videoBox">
		<view>
		<emlive-pusher 
			class="live-pusher" 
			objectFit="fill"
			:videoWidth="640"
			:videoHeight="480"
			:muted="muted" 
			:enableCamera="enableCamera" 
			:devicePosition="devicePosition"
			:rtcLogToConsole="true"
			id="livePusher"
			ref="livePusher" 
			@bindnetstatus="netstatus" 
			@bindstatechange="statechange" 
			@callbackData="onData"
			:style="{width:170+'px',height:170+'px',margin: 5+'px', 'background-color': bkColor}"
			>
		</emlive-pusher>
		<text style="color:#fff; font-size: 20rpx;">我</text>
		</view>
		<view v-for="(item, index) in livePlayes"
			:key="item.id"
		>
			<emlive-player
				id="livePlayer" 
				ref="livePlayer" 
				objectFit="fit" 
				@bindstatechange="playerStateChange"
				@bindnetstatus="playerNetChange"
				:data-streamId="item.id"
				:muted="false"
				:enableCamera="true" 
				:openSpeaker="openSpeaker"
				@callbackData="onPlayerData"
				style="width:170px;height:170px; margin: 5px"
				>
			</emlive-player>
			<text style="color: #fff"> {{ item.imName }} </text>
		</view>
	</view>
	
	<view class="controlContent">
		<view class="emediaContrContent">
			<view class="controlItem" @tap="switchCamera">
				<image
					class="icon-record"
					:src="getImgUrl(devicePositionIcon)"/>
				<text :style="{color: devicePositionColor}">摄像头</text>
			</view>
			<view class="controlItem" @tap="switchMicphone">
				<image
					class="icon-record"
					:src="getImgUrl(micphoneIcon)"/>
				<text :style="{color: micphoneColor}">麦克风</text>
			</view>
			<view class="controlItem" @tap="togglePlay">
				<image
					class="icon-record"
					:src="getImgUrl(videoIcon)"/>
				<text :style="{color: videoColor}">视频</text>
			</view>
			<view class="controlItem" @tap="inviteMember">
				<image
					class="icon-record"
					:src="getImgUrl('invite_white')"/>
				<text class="inviteText">邀请</text>
			</view>
		</view>
		<view class="hangup" @tap="hangup">
			<text style="color: #fff">挂断</text>
		</view>
	</view>
	
	<chatEmediaInvite :groupId="groupId" @onInvite="onInvite" @goBack="goBack" v-if="showInvite"/>
	</view>
	
 </template>
 
<script>
import chatEmediaInvite from "../../components/invite/index.nvue"
	export default {
		data() {
			return {
				livePlayes: [],
				devicePosition: "front",
				muted: false,
				devicePositionIcon: 'switchCamera_white',
				devicePositionColor: '#fff',
				micphoneIcon: 'micphone_white',
				micphoneColor: '#fff',
				videoIcon: 'video_white',
				videoColor: '#fff',
				confrId: '',
				enableCamera: true,
				time: '00:00:00',
				context: {},
				members: [],
				groupId: '',
				bkColor: "rgba(0,0,0,0)",
				showInvite: false,
				openSpeaker: true
			}
		},
		components: {
			chatEmediaInvite,
		},
		props: {
		  username: {
		    type: Object,
		    default: () => ({}),
		  },
		  action: {
		    type: Object,
		    default: ()=>({}),
		  }
		},
		methods: {
			joinRoom(data){
				console.log(new Date().toLocaleString()+' joinRoom',data)
				let me = this;
				let rec = wx.getStorageSync("rec") || true;
				let recMerge = wx.getStorageSync("recMerge") || true;
				// 加入已有会议
				if(data && data.conferenceId){
					uni.emedia.mgr.joinConference(data.conferenceId, data.password).then( (res) => {
						console.log('我已经加入会议了', res)
					}).catch((e)=>{
						console.log('加入会议失败', e)
					})
					return 
				}
				// 创建会议并加入
				uni.emedia.mgr.createConference(10, '123456', rec, recMerge).then( (data) => {
					console.log(new Date().toLocaleString()+' 创建会议成功', data)
					let ticket = data.data.ticket
					let ticketJosn = JSON.parse(ticket)
					let confrId = me.confrId = ticketJosn.confrId

					uni.emedia.mgr.joinConference(confrId, '123456').then( (res) => {
						console.log('我已经加入会议了', res)
						me.sendInviteMsg(me.members, confrId, '123456') // 发送邀请消息
					})
				})
			},
			
			addEmediaListen(){
				let me = this;

				uni.emedia.mgr.onMemberExited = function(reason) {
					console.log(new Date().toLocaleString()+' **** onMemberExited: ---', reason)
				};
				uni.emedia.mgr.onStreamRemoved = function(stream){
					console.log(new Date().toLocaleString()+' ***** onStreamRemoved -----', stream)
					me.livePlayes.forEach((item, index) => {
						if(item.id === stream.id){
							me.livePlayes.splice(index, 1)
						}
					})
				};
				
				uni.emedia.mgr.onMemberJoined = function(mem, steam) {
					console.log(new Date().toLocaleString()+"onMemberJoined :", mem, steam)

					var jid = uni.WebIM.conn.context.jid
					var identityName = jid.appKey + '_' + jid.name+ '@' + jid.domain
					
					if(mem.name === identityName){ // 自己加入会议了
						console.log(' --- 发布流 publish---', me.$refs.livePusher)
						uni.emedia.mgr.publish(me.confrId, me.$refs.livePusher)
					}
				};
				
				uni.emedia.mgr.onStreamAdded = function(stream) {
					console.log(new Date().toLocaleString()+'****** onAddStream ***', stream)
					let streamId = stream.id
					let dataStream = stream;
					if(me.livePlayes.length > 5) return; // 最多支持9个
					stream.imName = me.getName(stream.memName)
					me.livePlayes.push(stream)
					
					setTimeout(()=>{ // 等dom创建好之后再订阅流，防止拿不到 me.$refs.livePlayer
						console.log(new Date().toLocaleString()+ '****** subscribe2 ***', me.$refs.livePlayer[0])
						me.$refs.livePlayer.forEach((item) => {
							if(item.attr.dataStreamId === streamId){
								uni.emedia.mgr.subscribe(me.confrId, dataStream, item)
							}
						})
					}, 1000)
				};
			},
			
			// live-pusher 组件回调数据
			onData(data){
				uni.emedia.mgr.postMessage(this.confrId, data, this.$refs.livePusher)
			},
			// livePlayer 组件回调数据
			onPlayerData(data){
				let me = this;
				if(data.detail.type === 'feature'){
					console.log(new Date().toLocaleString()+' *** 拉流 *** 插件返回数据', data)
					let rtcId = data.detail.data.subSId
					let index;
					console.log('rtccID -----', rtcId)

					me.livePlayes.forEach((item, key) => {
						if(item.id == rtcId){
							index = key
						}
					})
					uni.emedia.mgr.postMessage(me.confrId, data, me.$refs.livePlayer[index])
				}
			},
			
			inviteMember(){
				this.showInvite = true;
			},
			goBack(){
				this.showInvite = false;
			},
			onInvite(member){ //收到邀请
				this.showInvite = false;
				if(member.length){
					this.sendInviteMsg(member, this.confrId, this.password || '123456')
				}
			},
			sendInviteMsg(members, confrId, password){
				let me = this;
				console.log('进入发邀请的函数', members)
				console.log('this.username.groupId----', this.groupId)
				console.log('confrId', confrId)
				
				members&&members.forEach((value) => {
					let id = uni.WebIM.conn.getUniqueId();
					let msg = new uni.WebIM.message('txt', id);
			
					msg.set({
						msg: wx.WebIM.conn.context.userId + ' invite you to video call',
						from: wx.WebIM.conn.context.userId,
						to: value,
						roomType: false,
						chatType: 'singleChat',
						ext: {
							msg_extension: JSON.stringify({
								inviter: wx.WebIM.conn.context.userId,
								group_id: me.groupId
							}),
							password: password,
							conferenceId: confrId
						},
						success(id, serverMsgId){
							console.log('发送邀请消息成功 to: '+value)
						},
						fail(id, serverMsgId){
							console.log('发送邀请消息失败了')
						}
					});
					
					uni.WebIM.conn.send(msg.body);
				})
			},
			statechange(e) {
				console.log(new Date().toLocaleString()+" statechange:" + JSON.stringify(e));
				// 没有权限请允许权限，再重新进入会议，或者提前打开app 麦克风 摄像头权限
				// 安卓授权慢的话会出现没有画面声音
				switch(e.detail.code){
					case 3001:
						uni.showToast({
							title: '无麦克风权限',
							duration: 2000
						})
						break;
						
					case 3000: 
						uni.showToast({
							title: '无摄像头权限',
							duration: 2000
						})
						break;
					case 2105:
						uni.showToast({
							title: '视频无数据',
							duration: 1000
						})
						break;
					case 2000:
						uni.showToast({
							title: '2000 RTCIceConnectionStateNew',
							duration: 1000
						})
						break;
					case 2004:
						uni.showToast({
							title: '2004 RTCIceConnectionStateFailed',
							duration: 1000
						})
						
						break;
					case 2005:
						uni.showToast({
							title: '2005 RTCIceConnectionStateDisconnected',
							duration: 1000
						})
						break;
					case 2002:
						uni.showToast({
							title: '2002 RTCIceConnectionStateConnected',
							duration: 1000
						})
						break;
					case 2006:
						uni.showToast({
							title: '2006 RTCIceConnectionStateClosed',
							duration: 1000
						})
						break;
					case 2107:
						uni.showToast({
							title: '2107 pub流失败',
							duration: 1000
						})
						break;
					case 2111: 
						uni.showToast({
							title: '2111 sub流失败',
							duration: 1000
						})
						break;
					case 2110:
						uni.showToast({
							title: '2110 sub流成功',
							duration: 1000
						})
						break;
					case 2106:
						uni.showToast({
							title: '2106 pub流成功',
							duration: 1000
						})
						break;
					default:
						break;
				}
			},
			
			playerStateChange(e){
				console.log('player state change:', e)
				uni.emedia.mgr.onStateChange(e)
				switch(e.detail.code){
					case 2105:
						uni.showToast({
							title: '视频无数据',
							duration: 1000
						})
						break;
					case 2000:
						uni.showToast({
							title: '2000 RTCIceConnectionStateNew',
							duration: 1000
						})
						break;
					case 2004:
						uni.showToast({
							title: '2004 RTCIceConnectionStateFailed',
							duration: 1000
						})
						break;
					case 2005:
						uni.showToast({
							title: '2005 RTCIceConnectionStateDisconnected',
							duration: 1000
						})
						break;
					case 2002:
						uni.showToast({
							title: '2002 RTCIceConnectionStateConnected',
							duration: 1000
						})
						break;
					case 2006:
						uni.showToast({
							title: '2006 RTCIceConnectionStateClosed',
							duration: 1000
						})
						break;
					case 2107:
						uni.showToast({
							title: '2107 pub流失败',
							duration: 1000
						})
						break;
					case 2111: 
						uni.showToast({
							title: '2111 sub流失败',
							duration: 1000
						})
						break;
					case 2110:
						uni.showToast({
							title: '2110 sub流成功',
							duration: 1000
						})
						break;
					case 2106:
						uni.showToast({
							title: '2106 pub流成功',
							duration: 1000
						})
						break;
					default:
						break;
				}
			},
			netstatus(e) {
				// console.log("插件返回netstatus", e)
				console.log("netstatus:" + JSON.stringify(e));
				if(e.detail.code == 4001){
					uni.showToast({
						title: '网络质量差',
						duration: 2000
					})
				}else if(e.detail.code == 4002){
					uni.showToast({
						title: '网络已断开',
						duration: 2000
					})
				}else if(e.detail.code == 4000){
					uni.showToast({
						title: '网络已连接',
						duration: 2000
					})
				}
				
			},
			
			playerNetChange(e){
				console.log(new Date().toLocaleString()+" player netstatus:" + JSON.stringify(e));
				if(e.detail.code == 4001){
					uni.showToast({
						title: '网络质量差',
						duration: 2000
					})
				}else if(e.detail.code == 4002){
					uni.showToast({
						title: '网络已断开',
						duration: 2000
					})
				}else if(e.detail.code == 4000){
					uni.showToast({
						title: '网络已连接',
						duration: 2000
					})
				}
			},
			error(e) {
				console.log("error:" + JSON.stringify(e));
			},

			stop: function() {
				this.$refs.LlivePusher.stop()
			},
			switchCamera: function() {
				this.devicePosition = this.devicePosition == 'front' ? 'back' : 'front'
				this.devicePositionIcon = this.devicePositionIcon =='switchCamera_white'?'switchCamera_gray': 'switchCamera_white';
				this.devicePositionColor = this.devicePositionColor == '#fff'? '#aaa':'#fff';
			},
			switchMicphone: function(){
				this.muted = !this.muted;
				this.micphoneIcon = this.micphoneIcon == 'micphone_white'? 'micphone_gray': 'micphone_white';
				this.micphoneColor = this.micphoneColor == '#fff'? '#aaa': '#fff'
			},
			
			togglePlay: function(){
				this.enableCamera = this.videoColor == '#fff'? false:true
				this.videoIcon = this.videoIcon == 'video_white'?'video_gray': 'video_white';
				this.videoColor = this.videoColor == '#fff'? '#aaa': '#fff'
				this.bkColor = this.videoColor == '#fff'? 'rgba(0,0,0,0)': 'rgba(0,0,0,1)';
			},
			hangup: function(){
				uni.emedia.mgr.exitConference(this.confrId)
				this.stopTimer()
				this.$refs.livePusher.stop();
				uni.navigateBack({
					 url: "../groupChatRoom/groupChatRoom"
				});
			},
			getImgUrl: function(name){
				return `../../static/images/${name}2x.png`
			},
			
			getTimer(){
				let count = 0;
				let time = '00:00:00'
				let me = this;
				this.timer = setInterval(() => {
					count++;
					let s = showNum(count % 60);
					let m = showNum(parseInt((count / 60)) % 60)
					let h = showNum(parseInt(count / 60 / 60))
					time = `${h}:${m}:${s}`
					me.time = time
				}, 1000)
	
				function showNum(num) {
					if (num < 10) {
						return '0' + num
					}
					return num
				}
			},
			stopTimer(){
				clearInterval(this.timer)
			},
			
			// 截取出im的userId 
			getName(str){
				console.log('name', str)
				if(typeof str !== 'string') return '';
				return (str.match(/chatdemoui_(\S*)@|chatdemoui_(\S*)/)[1] || str.match(/chatdemoui_(\S*)@|chatdemoui_(\S*)/)[2])
			}
		
		},
		
		onReady() {
			uni.setKeepScreenOn({keepScreenOn: true})
		},
		onLoad(options){
			this.addEmediaListen()
			let data = JSON.parse(options.srcData)
			this.getTimer()
			setTimeout(() => {
				if(data.action == 'join'){
					// 受邀请加入会议
					let {conferenceId, password, msg_extension} = data
					this.confrId = conferenceId;
					let msgExt = JSON.parse(msg_extension)
					this.groupId = msgExt.group_id
					this.joinRoom({conferenceId, password})
					return
				}
				let members = data.confrMember
				let groupId = data.groupId
				this.members = members;
				this.groupId = groupId;
				this.joinRoom()
			})
			
			uni.onNetworkStatusChange(function (res) {
			    console.log(new Date().toLocaleString()+' 网络是否连接', res.isConnected);
				if(!res.isConnected){
					uni.showToast({
						title: '网络断开连接',
						duration: 2000
					});
				}
			});
		},
		onUnload(){
			console.log(new Date().toLocaleString()+' 退出')
			uni.emedia.mgr.exitConference(this.confrId)
			this.stopTimer()
		}
	}
</script>

<style scoped>
/* @import url("./index.css"); */
.page{
	background-color: #333333;
	width: 750rpx;;
	height: 1464rpx;
	position: absolute;
}

.videoBox{
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	/* background-color: #008000; */
	overflow: hidden;
}
.remote-video{
	width: 371rpx;
	height: 371rpx;
	background-color: pink;
	margin: 2rpx;
}
.controlContent{
	display: flex;
	flex-direction: column;
	align-items: center;
	position: fixed;
	bottom: 0;
	width: 750rpx;
	/* background-color: #09BB07; */
}
.emediaContrContent{
	display: flex;
	/* flex: 1; */
	/* width: 750rpx; */
	flex-direction: row;
	justify-content: space-between;
	padding: 0;
	/* background-color: #0000FF; */
}
.controlItem{
	margin: 30rpx;
	text-align: center;
	flex: 1;
	height: 100rpx;
	display: flex;
	justify-content: center;
	align-items: center;
	color: #FFFFFF;
	font-size: 12px;
	font-weight: bold;
}
.controlItem text{
	font-size: 10px;
	font-weight: bold;
}
.inviteText{
	color: #fff;
}
.hangup{
	width: 100rpx;
	height: 100rpx;
	border-radius: 50rpx;
	background-color: #CE3918;
	margin-top: 35rpx;
	margin-bottom: 30rpx;
	display: flex;
	align-items: center;
	justify-content: center;
	color: #FFFFFF;

}
.icon-record{
	width: 44rpx;
	height: 48rpx;
	margin: 5px;
}
</style>>>>>>>> .r1859
